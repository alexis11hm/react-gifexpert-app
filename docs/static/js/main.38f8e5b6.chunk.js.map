{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAkB5C,OAEI,aADA,CACA,QAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAMlB,SACQ,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIEA,EAAUC,OAJZ,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAdO,kBAeZA,GAfY,4CAAH,sDCDPS,EAAc,SAAC,GAAmB,EAAlBN,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKgB,UAAU,2DAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCFJS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAK,GACLe,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAsBxC,OAZAC,qBAAW,WACP1B,EAAQC,GAAU0B,MAAK,SAAAC,GACnBH,EAAS,CACDjB,KAAMoB,EACNL,SAAS,SAKtB,CAACtB,IAGGuB,EDnBwBK,CAAa5B,GAAhCa,EAHuB,EAG5BN,KAAae,EAHe,EAGfA,QAEpB,OACI,qCACI,6BAAKtB,IACJsB,GAAW,aACZ,qBAAKJ,UAAU,YAAf,SAGYL,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAESA,GADCA,EAAIC,aEb7BkB,EAAe,WAAM,IAAD,EAGO3C,mBAAS,CAAC,aAHjB,mBAGtBQ,EAHsB,KAGVT,EAHU,KAU7B,OACI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEI,6BAEIS,EAAWe,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAYA,GADLA,YCnBnC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.38f8e5b6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(categories => [inputValue,...categories])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        //si tenemos un elemento que agrupe a otros elementos no es necesario el fragment <></> en este caso, form\r\n        <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\nexport const getGifs = async (category) =>{\r\n    //encodeURI remplaza los espacions por %20\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZJetAE8DBAZ898QYbLacRghatfenCjmH`\r\n    const respuesta = await fetch(url)\r\n    const {data} = await respuesta.json()\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    console.log(gifs)\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React/*, { useState, useEffect }*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //data cambian al nombre de images, pero el contenido es lo mismo\r\n    const {data:images, loading} = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && 'Loading...'}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        //{..img} es como pasar los atributos de img [id,title, url] y su valor como props, pero de manera corta\r\n                        images.map( (img) => (\r\n                            <GifGridItem \r\n                                key={ img.id } \r\n                                { ...img }\r\n                            /> \r\n                            )\r\n                        )\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\n\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    //Solo se dispara una vez cuando el componente se renderiza por primera vez\r\n    //se hace una validacion en los [] para saber cuando se renderiza de nuevo\r\n    //los efectos no pueden ser asincronos\r\n    useEffect( () => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            }\r\n        )\r\n        \r\n    }, [category]) //Si la categoria cambia, entonces se volvera a ejecutar el useEffect\r\n    \r\n\r\n    return state //{ data: [], loading: true }\r\n}","\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n\r\n    const [categories, setCategories] = useState(['Simpsons'])\r\n\r\n    /*const handleAdd = () => {\r\n        //Mantengo las categorias anteriores y agrego una nueva\r\n        setCategories([...categories,'El pepe'])\r\n        //setCategories( (cats) => [...categories,'el pepe']) //es lo mismo de arriba\r\n    }*/\r\n    return (\r\n        <>\r\n            <h2>GifExpert</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            {\r\n                <ol>\r\n                {\r\n                    categories.map((category) => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} />\r\n                    ))\r\n                }\r\n                </ol>\r\n            }\r\n        </>\r\n    )\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//DEntro de src crear component GifExpert con h2 y un hr"],"sourceRoot":""}